{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"../api/axios\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { SendNotiToUpdateNumber, SendNotiToUpdateData } from \"../Redux/action\";\nexport default function SendNotification(formData, id, type, OldData, Username) {\n  _s();\n  const countofNoti = useSelector(state => state.NotiCount);\n  const dispatch = useDispatch();\n  let message = \"\";\n  switch (type) {\n    case \"add\":\n      message = `  has been added  \" ${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\n      break;\n    case \"edit\":\n      function compareObjects(OldData, formData) {\n        const differences = [];\n        for (let key in OldData) {\n          if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\n            if (OldData[key] !== formData[key]) {\n              differences.push(`The product changed its ${key} from ${OldData[key]} to ${formData[key]}`);\n            }\n          }\n        }\n        return differences;\n      }\n      const diffs = compareObjects(OldData, formData);\n      if (diffs.length > 0) {\n        message = diffs.join(\" and \");\n      } else {\n        message = null;\n      }\n      break;\n    case \"delete\":\n      message = ` has been deleted \"${formData.name}\" Product.`;\n      break;\n    case \"delete\":\n      message = ` has been deleted \"${formData.name}\" Product.`;\n      break;\n    case \"editMovment\":\n      message = ` has been deleted \"\" Product.`;\n      break;\n  }\n  const formDatanotification = {\n    productId: id,\n    message: message\n  };\n  handleSubmit();\n  return null;\n}\n_s(SendNotification, \"ILhnew87cZoDqg35JE9oX9SnMIw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = SendNotification;\nconst handleSubmit = async e => {\n  if (message) {\n    try {\n      const csrfResponse = await axios.get(\"/get-csrf-token\");\n      const csrfToken = csrfResponse.data.token;\n      axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\n      await axios.post(\"/notifications\", formDatanotification);\n      console.log(\"notifications added successfully\");\n    } catch (error) {\n      console.error(\"Error adding notifications:\", error.message);\n    }\n    dispatch(SendNotiToUpdateNumber(parseInt(countofNoti) + 1));\n  } else {}\n};\nvar _c;\n$RefreshReg$(_c, \"SendNotification\");","map":{"version":3,"names":["React","useState","axios","useSelector","useDispatch","SendNotiToUpdateNumber","SendNotiToUpdateData","SendNotification","formData","id","type","OldData","Username","_s","countofNoti","state","NotiCount","dispatch","message","name","quantity","price","compareObjects","differences","key","hasOwnProperty","push","diffs","length","join","formDatanotification","productId","handleSubmit","_c","e","csrfResponse","get","csrfToken","data","token","defaults","headers","common","post","console","log","error","parseInt","$RefreshReg$"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/Functions/SendNotification.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"../api/axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendNotiToUpdateNumber, SendNotiToUpdateData } from \"../Redux/action\";\r\nexport default function SendNotification(\r\n  formData,\r\n  id,\r\n  type,\r\n  OldData,\r\n  Username\r\n) {\r\n  const countofNoti = useSelector((state) => state.NotiCount);\r\n  const dispatch = useDispatch();\r\n  let message = \"\";\r\n  switch (type) {\r\n    case \"add\":\r\n      message = `  has been added  \" ${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\r\n      break;\r\n    case \"edit\":\r\n      function compareObjects(OldData, formData) {\r\n        const differences = [];\r\n\r\n        for (let key in OldData) {\r\n          if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\r\n            if (OldData[key] !== formData[key]) {\r\n              differences.push(\r\n                `The product changed its ${key} from ${OldData[key]} to ${formData[key]}`\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        return differences;\r\n      }\r\n      const diffs = compareObjects(OldData, formData);\r\n      if (diffs.length > 0) {\r\n        message = diffs.join(\" and \");\r\n      } else {\r\n        message = null;\r\n      }\r\n      break;\r\n    case \"delete\":\r\n      message = ` has been deleted \"${formData.name}\" Product.`;\r\n      break;\r\n    case \"delete\":\r\n      message = ` has been deleted \"${formData.name}\" Product.`;\r\n      break;\r\n    case \"editMovment\":\r\n      message = ` has been deleted \"\" Product.`;\r\n      break;\r\n  }\r\n  const formDatanotification = {\r\n    productId: id,\r\n    message: message,\r\n  };\r\n  handleSubmit();\r\n\r\n  return null;\r\n}\r\nconst handleSubmit = async (e) => {\r\n  if (message) {\r\n    try {\r\n      const csrfResponse = await axios.get(\"/get-csrf-token\");\r\n      const csrfToken = csrfResponse.data.token;\r\n\r\n      axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\r\n      await axios.post(\"/notifications\", formDatanotification);\r\n      console.log(\"notifications added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding notifications:\", error.message);\r\n    }\r\n    dispatch(SendNotiToUpdateNumber(parseInt(countofNoti) + 1));\r\n  } else {\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}