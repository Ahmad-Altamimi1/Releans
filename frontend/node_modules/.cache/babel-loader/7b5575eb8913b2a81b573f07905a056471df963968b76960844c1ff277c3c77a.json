{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport axios from \"../api/axios\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { SendNotiToUpdateNumber, SendNotiToUpdateData } from \"../Redux/action\";\nexport default function SendNotification({\n  formData,\n  id,\n  type,\n  OldData,\n  Username\n}) {\n  _s();\n  const countofNoti = useSelector(state => state.NotiCount);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const message = generateMessage(type, formData, OldData);\n    if (message) {\n      sendNotification(id, message);\n      dispatch(SendNotiToUpdateNumber(parseInt(countofNoti) + 1));\n    }\n  }, [formData, id, type, OldData, countofNoti, dispatch]);\n  const generateMessage = (type, formData, OldData) => {\n    let message = \"\";\n    switch (type) {\n      case \"add\":\n        message = ` has been added \"${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\n        break;\n      case \"edit\":\n        message = generateEditMessage(OldData, formData);\n        break;\n      case \"delete\":\n        message = ` has been deleted \"${formData.name}\" Product.`;\n        break;\n      case \"editMovment\":\n        message = ` has been deleted \"\" Product.`;\n        break;\n      default:\n        break;\n    }\n    return message;\n  };\n  const generateEditMessage = (OldData, formData) => {\n    const differences = [];\n    for (let key in OldData) {\n      if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\n        if (OldData[key] !== formData[key]) {\n          differences.push(`The product changed its ${key} from ${OldData[key]} to ${formData[key]}`);\n        }\n      }\n    }\n    return differences.length > 0 ? differences.join(\" and \") : null;\n  };\n  const sendNotification = async (id, message) => {\n    try {\n      const csrfResponse = await axios.get(\"/get-csrf-token\");\n      const csrfToken = csrfResponse.data.token;\n      axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\n      await axios.post(\"/notifications\", {\n        productId: id,\n        message\n      });\n      console.log(\"Notification added successfully\");\n    } catch (error) {\n      console.error(\"Error adding notification:\", error.message);\n    }\n  };\n  return null; // Consider returning meaningful content here\n}\n_s(SendNotification, \"Fm8vudEOwDbxeFKPB0D3q6F7uPg=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = SendNotification;\nvar _c;\n$RefreshReg$(_c, \"SendNotification\");","map":{"version":3,"names":["React","useEffect","axios","useSelector","useDispatch","SendNotiToUpdateNumber","SendNotiToUpdateData","SendNotification","formData","id","type","OldData","Username","_s","countofNoti","state","NotiCount","dispatch","message","generateMessage","sendNotification","parseInt","name","quantity","price","generateEditMessage","differences","key","hasOwnProperty","push","length","join","csrfResponse","get","csrfToken","data","token","defaults","headers","common","post","productId","console","log","error","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/Functions/SendNotification.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport axios from \"../api/axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendNotiToUpdateNumber, SendNotiToUpdateData } from \"../Redux/action\";\r\n\r\nexport default function SendNotification({\r\n  formData,\r\n  id,\r\n  type,\r\n  OldData,\r\n  Username,\r\n}) {\r\n  const countofNoti = useSelector((state) => state.NotiCount);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const message = generateMessage(type, formData, OldData);\r\n    if (message) {\r\n      sendNotification(id, message);\r\n      dispatch(SendNotiToUpdateNumber(parseInt(countofNoti) + 1));\r\n    }\r\n  }, [formData, id, type, OldData, countofNoti, dispatch]);\r\n\r\n  const generateMessage = (type, formData, OldData) => {\r\n    let message = \"\";\r\n    switch (type) {\r\n      case \"add\":\r\n        message = ` has been added \"${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\r\n        break;\r\n      case \"edit\":\r\n        message = generateEditMessage(OldData, formData);\r\n        break;\r\n      case \"delete\":\r\n        message = ` has been deleted \"${formData.name}\" Product.`;\r\n        break;\r\n      case \"editMovment\":\r\n        message = ` has been deleted \"\" Product.`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return message;\r\n  };\r\n\r\n  const generateEditMessage = (OldData, formData) => {\r\n    const differences = [];\r\n    for (let key in OldData) {\r\n      if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\r\n        if (OldData[key] !== formData[key]) {\r\n          differences.push(\r\n            `The product changed its ${key} from ${OldData[key]} to ${formData[key]}`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return differences.length > 0 ? differences.join(\" and \") : null;\r\n  };\r\n\r\n  const sendNotification = async (id, message) => {\r\n    try {\r\n      const csrfResponse = await axios.get(\"/get-csrf-token\");\r\n      const csrfToken = csrfResponse.data.token;\r\n      axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\r\n      await axios.post(\"/notifications\", { productId: id, message });\r\n      console.log(\"Notification added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding notification:\", error.message);\r\n    }\r\n  };\r\n\r\n  return null; // Consider returning meaningful content here\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}