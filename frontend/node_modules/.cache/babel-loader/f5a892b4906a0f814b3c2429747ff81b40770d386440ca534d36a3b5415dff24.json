{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport axios from \"../api/axios\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { SendNotiToUpdateNumber } from \"../Redux/action\";\nexport default function SendNotification(formData, id, type, OldData, Username) {\n  _s();\n  const dispatch = useDispatch();\n  const countofNoti = useSelector(state => state.NotiCount);\n  useEffect(() => {\n    let message = \"\";\n    switch (type) {\n      case \"add\":\n        message = `  has been added  \"${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\n        break;\n      case \"edit\":\n        function compareObjects(OldData, formData) {\n          const differences = [];\n          for (let key in OldData) {\n            if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\n              if (OldData[key] !== formData[key]) {\n                differences.push(`The product changed its ${key} from ${OldData[key]} to ${formData[key]}`);\n              }\n            }\n          }\n          return differences;\n        }\n        const diffs = compareObjects(OldData, formData);\n        if (diffs.length > 0) {\n          message = diffs.join(\" and \");\n        }\n        break;\n      case \"delete\":\n        message = ` has been deleted \"${formData.name}\" Product.`;\n        break;\n      case \"editMovment\":\n        message = ` has been deleted \"\" Product.`;\n        break;\n      default:\n        break;\n    }\n    const formDatanotification = {\n      productId: id,\n      message: message\n    };\n    const handleSubmit = async () => {\n      if (message) {\n        try {\n          const csrfResponse = await axios.get(\"/get-csrf-token\");\n          const csrfToken = csrfResponse.data.token;\n          axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\n          await axios.post(\"/notifications\", formDatanotification);\n          console.log(\"notifications added successfully\");\n          dispatch(SendNotiToUpdateNumber(parseInt(countofNoti) + 1));\n        } catch (error) {\n          console.error(\"Error adding notifications:\", error.message);\n        }\n      }\n    };\n    handleSubmit();\n  }, [countofNoti, dispatch, formData, id, OldData, type]);\n\n  // Custom hooks don't return JSX, so we can return null or anything else here\n  return null;\n}\n_s(SendNotification, \"6Us3FKsSsPNdWHipEA348p+u5wo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = SendNotification;\nvar _c;\n$RefreshReg$(_c, \"SendNotification\");","map":{"version":3,"names":["useEffect","axios","useSelector","useDispatch","SendNotiToUpdateNumber","SendNotification","formData","id","type","OldData","Username","_s","dispatch","countofNoti","state","NotiCount","message","name","quantity","price","compareObjects","differences","key","hasOwnProperty","push","diffs","length","join","formDatanotification","productId","handleSubmit","csrfResponse","get","csrfToken","data","token","defaults","headers","common","post","console","log","parseInt","error","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/Functions/SendNotification.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport axios from \"../api/axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendNotiToUpdateNumber } from \"../Redux/action\";\r\n\r\nexport default function SendNotification(\r\n  formData,\r\n  id,\r\n  type,\r\n  OldData,\r\n  Username\r\n) {\r\n  const dispatch = useDispatch();\r\n  const countofNoti = useSelector((state) => state.NotiCount);\r\n\r\n  useEffect(() => {\r\n    let message = \"\";\r\n    switch (type) {\r\n      case \"add\":\r\n        message = `  has been added  \"${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\r\n        break;\r\n      case \"edit\":\r\n        function compareObjects(OldData, formData) {\r\n          const differences = [];\r\n\r\n          for (let key in OldData) {\r\n            if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\r\n              if (OldData[key] !== formData[key]) {\r\n                differences.push(\r\n                  `The product changed its ${key} from ${OldData[key]} to ${formData[key]}`\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          return differences;\r\n        }\r\n        const diffs = compareObjects(OldData, formData);\r\n        if (diffs.length > 0) {\r\n          message = diffs.join(\" and \");\r\n        }\r\n        break;\r\n      case \"delete\":\r\n        message = ` has been deleted \"${formData.name}\" Product.`;\r\n        break;\r\n      case \"editMovment\":\r\n        message = ` has been deleted \"\" Product.`;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    const formDatanotification = {\r\n      productId: id,\r\n      message: message,\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n      if (message) {\r\n        try {\r\n          const csrfResponse = await axios.get(\"/get-csrf-token\");\r\n          const csrfToken = csrfResponse.data.token;\r\n\r\n          axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\r\n          await axios.post(\"/notifications\", formDatanotification);\r\n          console.log(\"notifications added successfully\");\r\n          dispatch(SendNotiToUpdateNumber(parseInt(countofNoti) + 1));\r\n        } catch (error) {\r\n          console.error(\"Error adding notifications:\", error.message);\r\n        }\r\n      }\r\n    };\r\n\r\n    handleSubmit();\r\n  }, [countofNoti, dispatch, formData, id, OldData, type]);\r\n\r\n  // Custom hooks don't return JSX, so we can return null or anything else here\r\n  return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}