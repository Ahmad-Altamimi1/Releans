{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:8000/api\",\n  withCredentials: true\n});\n\n// Add a request interceptor\ninstance.interceptors.request.use(function (config) {\n  // Add authorization header with the access token\n  const accessToken = localStorage.getItem(\"accessToken\"); // Assuming you store the access token in localStorage\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","error","Promise","reject"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/api/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:8000/api\",\r\n  withCredentials: true,\r\n});\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    // Add authorization header with the access token\r\n    const accessToken = localStorage.getItem(\"accessToken\"); // Assuming you store the access token in localStorage\r\n    if (accessToken) {\r\n      config.headers.Authorization = `Bearer ${accessToken}`;\r\n    }\r\n    return config;\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/B,UAAUC,MAAM,EAAE;EAChB;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;EACzD,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,WAAY,EAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACD,UAAUM,KAAK,EAAE;EACf,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}