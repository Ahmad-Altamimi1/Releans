{"ast":null,"code":"import React, { useState } from \"react\";\nimport axios from \"../api/axios\";\nexport default function SendNotification(formData, id, type, OldData, Username) {\n  var _s = $RefreshSig$();\n  function NotificationforLowStock(id) {\n    _s();\n    useEffect(() => {\n      const fetchProduct = async () => {\n        try {\n          const csrfResponse = await axios.get(\"/get-csrf-token\");\n          const csrfToken = csrfResponse.data.token;\n          axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\n          const response = await axios.get(`/products/${id}`);\n          const product = response.data.product;\n          if (product.quantity <= product.quantity) {}\n        } catch (error) {\n          console.error(\"Error fetching product:\", error.message);\n        }\n      };\n      fetchProduct();\n    }, [id, onEditComplete]);\n  }\n  _s(NotificationforLowStock, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  let message = \"\";\n  switch (type) {\n    case \"add\":\n      message = `  has been added  \" ${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\n      break;\n    case \"addMove\":\n      message = `   added movent number  \" ${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\n      NotificationforLowStock(id);\n      break;\n    case \"edit\":\n      function compareObjects(OldData, formData) {\n        const differences = [];\n        for (let key in OldData) {\n          if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\n            if (OldData[key] !== formData[key]) {\n              differences.push(`The product changed its ${key} from ${OldData[key]} to ${formData[key]}`);\n            }\n          }\n        }\n        return differences;\n      }\n      const diffs = compareObjects(OldData, formData);\n      if (diffs.length > 0) {\n        message = diffs.join(\" and \");\n      } else {\n        message = false;\n      }\n      // message = ` has been edited \"${formData.name}\" Product .`;\n      break;\n    case \"delete\":\n      message = ` has been deleted \"${formData.name}\" Product.`;\n      break;\n    case \"delete\":\n      message = ` has been deleted \"${formData.name}\" Product.`;\n      break;\n    case \"editMovment\":\n      function compareObjectstomovment(OldData, formData) {\n        const differences = [];\n        for (let key in OldData) {\n          if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\n            if (OldData[key] !== formData[key]) {\n              differences.push(`The product changed its ${key} from ${OldData[key]} to ${formData[key]}`);\n            }\n          }\n        }\n        return differences;\n      }\n      const diffMov = compareObjectstomovment(OldData, formData);\n      if (diffs.length > 0) {\n        message = diffMov.join(\" and \");\n      } else {\n        message = false;\n      }\n      // message = ` has been edited \"${formData.name}\" Product .`;\n      break;\n  }\n  const formDatanotification = {\n    productId: id,\n    message: message\n  };\n  const handleSubmit = async e => {\n    try {\n      const csrfResponse = await axios.get(\"/get-csrf-token\");\n      const csrfToken = csrfResponse.data.token;\n      axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\n      await axios.post(\"/notifications\", formDatanotification);\n      console.log(\"notifications added successfully\");\n    } catch (error) {\n      console.error(\"Error adding notifications:\", error.message);\n    }\n  };\n  if (message) {\n    handleSubmit();\n  }\n  return message;\n}\n_c = SendNotification;\nvar _c;\n$RefreshReg$(_c, \"SendNotification\");","map":{"version":3,"names":["React","useState","axios","SendNotification","formData","id","type","OldData","Username","_s","$RefreshSig$","NotificationforLowStock","useEffect","fetchProduct","csrfResponse","get","csrfToken","data","token","defaults","headers","common","response","product","quantity","error","console","message","onEditComplete","name","price","compareObjects","differences","key","hasOwnProperty","push","diffs","length","join","compareObjectstomovment","diffMov","formDatanotification","productId","handleSubmit","e","post","log","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/Functions/SendNotification.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"../api/axios\";\r\n\r\nexport default function SendNotification(\r\n  formData,\r\n  id,\r\n  type,\r\n  OldData,\r\n  Username\r\n) {\r\n  function NotificationforLowStock(id) {\r\n    useEffect(() => {\r\n      const fetchProduct = async () => {\r\n        try {\r\n          const csrfResponse = await axios.get(\"/get-csrf-token\");\r\n          const csrfToken = csrfResponse.data.token;\r\n\r\n          axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\r\n          const response = await axios.get(`/products/${id}`);\r\n          const product = response.data.product;\r\n          if (product.quantity <= product.quantity) {\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching product:\", error.message);\r\n        }\r\n      };\r\n\r\n      fetchProduct();\r\n    }, [id, onEditComplete]);\r\n  }\r\n\r\n  let message = \"\";\r\n  switch (type) {\r\n    case \"add\":\r\n      message = `  has been added  \" ${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\r\n      break;\r\n    case \"addMove\":\r\n      message = `   added movent number  \" ${formData.name}\" Product and quantity is ${formData.quantity} with Price ${formData.price}$ for unit.`;\r\n      NotificationforLowStock(id);\r\n      break;\r\n    case \"edit\":\r\n      function compareObjects(OldData, formData) {\r\n        const differences = [];\r\n\r\n        for (let key in OldData) {\r\n          if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\r\n            if (OldData[key] !== formData[key]) {\r\n              differences.push(\r\n                `The product changed its ${key} from ${OldData[key]} to ${formData[key]}`\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        return differences;\r\n      }\r\n      const diffs = compareObjects(OldData, formData);\r\n      if (diffs.length > 0) {\r\n        message = diffs.join(\" and \");\r\n      } else {\r\n        message = false;\r\n      }\r\n      // message = ` has been edited \"${formData.name}\" Product .`;\r\n      break;\r\n    case \"delete\":\r\n      message = ` has been deleted \"${formData.name}\" Product.`;\r\n      break;\r\n    case \"delete\":\r\n      message = ` has been deleted \"${formData.name}\" Product.`;\r\n      break;\r\n\r\n    case \"editMovment\":\r\n      function compareObjectstomovment(OldData, formData) {\r\n        const differences = [];\r\n\r\n        for (let key in OldData) {\r\n          if (OldData.hasOwnProperty(key) && formData.hasOwnProperty(key)) {\r\n            if (OldData[key] !== formData[key]) {\r\n              differences.push(\r\n                `The product changed its ${key} from ${OldData[key]} to ${formData[key]}`\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        return differences;\r\n      }\r\n      const diffMov = compareObjectstomovment(OldData, formData);\r\n      if (diffs.length > 0) {\r\n        message = diffMov.join(\" and \");\r\n      } else {\r\n        message = false;\r\n      }\r\n      // message = ` has been edited \"${formData.name}\" Product .`;\r\n      break;\r\n  }\r\n  const formDatanotification = {\r\n    productId: id,\r\n    message: message,\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    try {\r\n      const csrfResponse = await axios.get(\"/get-csrf-token\");\r\n      const csrfToken = csrfResponse.data.token;\r\n\r\n      axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\r\n      await axios.post(\"/notifications\", formDatanotification);\r\n      console.log(\"notifications added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding notifications:\", error.message);\r\n    }\r\n  };\r\n\r\n  if (message) {\r\n    handleSubmit();\r\n  }\r\n\r\n  return message;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}