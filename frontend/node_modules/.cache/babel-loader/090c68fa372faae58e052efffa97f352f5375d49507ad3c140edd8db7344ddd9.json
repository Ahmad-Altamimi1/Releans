{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"../api/axios\";\nasync function updateNotification(id) {\n  try {\n    const csrfResponse = await axios.get(\"/get-csrf-token\");\n    const csrfToken = csrfResponse.data.token;\n    axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\n    await axios.put(`/notifications/${id}`, {\n      open: \"true\"\n    });\n  } catch (error) {\n    // Handle error, e.g., show an error message\n    console.error(\"Error updating notification:\", error.message);\n  }\n}\nconst fetchNotifications = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/notReednotifications\");\n    return response.data.notReednotifications;\n  } catch (error) {\n    throw new Error(\"Network response was not ok\");\n  }\n};\nconst MakeNotiOpen = ({\n  isOpen\n}) => {\n  _s();\n  const {\n    data: openotifications,\n    isLoading,\n    isError\n  } = useQuery(\"notReednotifications\", fetchNotifications);\n  useEffect(() => {\n    if (openotifications && openotifications.length > 0) {\n      // Iterate through notifications and update their status\n      openotifications.forEach(notification => {\n        updateNotification(notification.id);\n      });\n    }\n  }, [openotifications]);\n  return null;\n};\n_s(MakeNotiOpen, \"WVT+a7FNOMxXFgnlxz9pWFckkx4=\", false, function () {\n  return [useQuery];\n});\n_c = MakeNotiOpen;\nexport default MakeNotiOpen;\nvar _c;\n$RefreshReg$(_c, \"MakeNotiOpen\");","map":{"version":3,"names":["React","useEffect","useQuery","axios","updateNotification","id","csrfResponse","get","csrfToken","data","token","defaults","headers","common","put","open","error","console","message","fetchNotifications","response","notReednotifications","Error","MakeNotiOpen","isOpen","_s","openotifications","isLoading","isError","length","forEach","notification","_c","$RefreshReg$"],"sources":["E:/xampp/htdocs/Ahmad-react/Releans/frontend/src/component/Functions/MakeNotiOpen.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport axios from \"../api/axios\";\r\n\r\nasync function updateNotification(id) {\r\n  try {\r\n    const csrfResponse = await axios.get(\"/get-csrf-token\");\r\n    const csrfToken = csrfResponse.data.token;\r\n\r\n    axios.defaults.headers.common[\"X-CSRF-TOKEN\"] = csrfToken;\r\n    await axios.put(`/notifications/${id}`, {\r\n      open: \"true\",\r\n    });\r\n  } catch (error) {\r\n    // Handle error, e.g., show an error message\r\n    console.error(\"Error updating notification:\", error.message);\r\n  }\r\n}\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    const response = await axios.get(\r\n      \"http://127.0.0.1:8000/api/notReednotifications\"\r\n    );\r\n    return response.data.notReednotifications;\r\n  } catch (error) {\r\n    throw new Error(\"Network response was not ok\");\r\n  }\r\n};\r\n\r\nconst MakeNotiOpen = ({ isOpen }) => {\r\n  const {\r\n    data: openotifications,\r\n    isLoading,\r\n    isError,\r\n  } = useQuery(\"notReednotifications\", fetchNotifications);\r\n\r\n  useEffect(() => {\r\n    if (openotifications && openotifications.length > 0) {\r\n      // Iterate through notifications and update their status\r\n      openotifications.forEach((notification) => {\r\n        updateNotification(notification.id);\r\n      });\r\n    }\r\n  }, [openotifications]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default MakeNotiOpen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,cAAc;AAEhC,eAAeC,kBAAkBA,CAACC,EAAE,EAAE;EACpC,IAAI;IACF,MAAMC,YAAY,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,iBAAiB,CAAC;IACvD,MAAMC,SAAS,GAAGF,YAAY,CAACG,IAAI,CAACC,KAAK;IAEzCP,KAAK,CAACQ,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAGL,SAAS;IACzD,MAAML,KAAK,CAACW,GAAG,CAAE,kBAAiBT,EAAG,EAAC,EAAE;MACtCU,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;EAC9D;AACF;AAEA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACI,GAAG,CAC9B,gDACF,CAAC;IACD,OAAOa,QAAQ,CAACX,IAAI,CAACY,oBAAoB;EAC3C,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,MAAM,IAAIM,KAAK,CAAC,6BAA6B,CAAC;EAChD;AACF,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM;IACJhB,IAAI,EAAEiB,gBAAgB;IACtBC,SAAS;IACTC;EACF,CAAC,GAAG1B,QAAQ,CAAC,sBAAsB,EAAEiB,kBAAkB,CAAC;EAExDlB,SAAS,CAAC,MAAM;IACd,IAAIyB,gBAAgB,IAAIA,gBAAgB,CAACG,MAAM,GAAG,CAAC,EAAE;MACnD;MACAH,gBAAgB,CAACI,OAAO,CAAEC,YAAY,IAAK;QACzC3B,kBAAkB,CAAC2B,YAAY,CAAC1B,EAAE,CAAC;MACrC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACqB,gBAAgB,CAAC,CAAC;EAEtB,OAAO,IAAI;AACb,CAAC;AAACD,EAAA,CAjBIF,YAAY;EAAA,QAKZrB,QAAQ;AAAA;AAAA8B,EAAA,GALRT,YAAY;AAmBlB,eAAeA,YAAY;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}