{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Releans\\\\frontend\\\\src\\\\component\\\\pages\\\\products.js\";\nimport React, { createContext, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport Header from \"../layouts/Header\";\nimport Sidebar from \"../layouts/sidebar\";\nimport Content from \"../sections/products/content\";\n\n// Create the UserContext\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport default function () {\n  const [numberOfNotification, setNumberOfUnOpenNotifications] = useState(1);\n  const fetchNotifications = async () => {\n    try {\n      const response = await axios.get(\"http://127.0.0.1:8000/api/notifications\");\n      let numberOfUnOpenNotifications = 0;\n      response.data.notifications.forEach(notification => {\n        if (notification.open === \"false\") {\n          numberOfUnOpenNotifications++;\n        }\n      });\n      setNumberOfUnOpenNotifications(numberOfUnOpenNotifications);\n      localStorage.setItem(\"previousNotificationCount\", numberOfUnOpenNotifications);\n      return response.data.notifications;\n    } catch (error) {\n      throw new Error(\"Network response was not ok\");\n    }\n  };\n  const {\n    data: notifications,\n    isLoading,\n    error,\n    refetch\n  } = useQuery(\"notifications\", fetchNotifications);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      refetch,\n      numberOfNotification\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["React","createContext","useState","useQuery","axios","Header","Sidebar","Content","jsxDEV","_jsxDEV","Fragment","_Fragment","UserContext","numberOfNotification","setNumberOfUnOpenNotifications","fetchNotifications","response","get","numberOfUnOpenNotifications","data","notifications","forEach","notification","open","localStorage","setItem","error","Error","isLoading","refetch","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/pages/products.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\nimport Header from \"../layouts/Header\";\r\nimport Sidebar from \"../layouts/sidebar\";\r\nimport Content from \"../sections/products/content\";\r\n\r\n// Create the UserContext\r\nconst UserContext = createContext();\r\n\r\nexport default function () {\r\n  const [numberOfNotification, setNumberOfUnOpenNotifications] = useState(1);\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://127.0.0.1:8000/api/notifications\"\r\n      );\r\n      let numberOfUnOpenNotifications = 0;\r\n      response.data.notifications.forEach((notification) => {\r\n        if (notification.open === \"false\") {\r\n          numberOfUnOpenNotifications++;\r\n        }\r\n      });\r\n\r\n      setNumberOfUnOpenNotifications(numberOfUnOpenNotifications);\r\n\r\n      localStorage.setItem(\r\n        \"previousNotificationCount\",\r\n        numberOfUnOpenNotifications\r\n      );\r\n\r\n      return response.data.notifications;\r\n    } catch (error) {\r\n      throw new Error(\"Network response was not ok\");\r\n    }\r\n  };\r\n\r\n  const {\r\n    data: notifications,\r\n    isLoading,\r\n    error,\r\n    refetch,\r\n  } = useQuery(\"notifications\", fetchNotifications);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ refetch, numberOfNotification }}>\r\n      <>\r\n        <Header />\r\n        <Sidebar />\r\n        <Content />\r\n      </>\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,OAAO,MAAM,8BAA8B;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;AAEnC,eAAe,YAAY;EACzB,MAAM,CAACY,oBAAoB,EAAEC,8BAA8B,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAE1E,MAAMa,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,yCACF,CAAC;MACD,IAAIC,2BAA2B,GAAG,CAAC;MACnCF,QAAQ,CAACG,IAAI,CAACC,aAAa,CAACC,OAAO,CAAEC,YAAY,IAAK;QACpD,IAAIA,YAAY,CAACC,IAAI,KAAK,OAAO,EAAE;UACjCL,2BAA2B,EAAE;QAC/B;MACF,CAAC,CAAC;MAEFJ,8BAA8B,CAACI,2BAA2B,CAAC;MAE3DM,YAAY,CAACC,OAAO,CAClB,2BAA2B,EAC3BP,2BACF,CAAC;MAED,OAAOF,QAAQ,CAACG,IAAI,CAACC,aAAa;IACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF,CAAC;EAED,MAAM;IACJR,IAAI,EAAEC,aAAa;IACnBQ,SAAS;IACTF,KAAK;IACLG;EACF,CAAC,GAAG1B,QAAQ,CAAC,eAAe,EAAEY,kBAAkB,CAAC;EAEjD,oBACEN,OAAA,CAACG,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEF,OAAO;MAAEhB;IAAqB,CAAE;IAAAmB,QAAA,eAC7DvB,OAAA,CAAAE,SAAA;MAAAqB,QAAA,gBACEvB,OAAA,CAACJ,MAAM;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV3B,OAAA,CAACH,OAAO;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACX3B,OAAA,CAACF,OAAO;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACX;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAE3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}