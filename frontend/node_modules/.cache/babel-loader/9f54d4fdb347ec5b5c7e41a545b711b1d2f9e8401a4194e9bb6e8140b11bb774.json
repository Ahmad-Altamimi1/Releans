{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Releans\\\\frontend\\\\src\\\\component\\\\Functions\\\\MakeNotiOpen.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchNotifications = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/notReednotifications\");\n    console.log(response.data.notifications);\n    return response.data.notifications;\n  } catch (error) {\n    throw new Error(\"Network response was not ok\");\n  }\n};\nconst MakeNotiOpen = ({\n  isOpen\n}) => {\n  _s();\n  const {\n    data: notifications,\n    isLoading,\n    isError\n  } = useQuery(\"notifications\", fetchNotifications);\n  console.log(\"Notifications\", notifications);\n  console.log(\"Notifications fetched successfully\");\n\n  // You can further process notifications here\n\n  return isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 19\n  }, this) : null;\n};\n_s(MakeNotiOpen, \"azkU/B05xVNSfeN7DkvElM2Xeu4=\", false, function () {\n  return [useQuery];\n});\n_c = MakeNotiOpen;\nexport default MakeNotiOpen;\nvar _c;\n$RefreshReg$(_c, \"MakeNotiOpen\");","map":{"version":3,"names":["React","useQuery","axios","jsxDEV","_jsxDEV","fetchNotifications","response","get","console","log","data","notifications","error","Error","MakeNotiOpen","isOpen","_s","isLoading","isError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/Releans/frontend/src/component/Functions/MakeNotiOpen.js"],"sourcesContent":["import React from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\n\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    const response = await axios.get(\r\n      \"http://127.0.0.1:8000/api/notReednotifications\"\r\n    );\r\n    console.log(response.data.notifications);\r\n    return response.data.notifications;\r\n  } catch (error) {\r\n    throw new Error(\"Network response was not ok\");\r\n  }\r\n};\r\n\r\nconst MakeNotiOpen = ({ isOpen }) => {\r\n  const {\r\n    data: notifications,\r\n    isLoading,\r\n    isError,\r\n  } = useQuery(\"notifications\", fetchNotifications);\r\n\r\n  console.log(\"Notifications\", notifications);\r\n  console.log(\"Notifications fetched successfully\");\r\n\r\n  // You can further process notifications here\r\n\r\n  return isOpen ? <div>{/* Your notification UI here */}</div> : null;\r\n};\r\n\r\nexport default MakeNotiOpen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAC9B,gDACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAACC,aAAa,CAAC;IACxC,OAAOL,QAAQ,CAACI,IAAI,CAACC,aAAa;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;AACF,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM;IACJN,IAAI,EAAEC,aAAa;IACnBM,SAAS;IACTC;EACF,CAAC,GAAGjB,QAAQ,CAAC,eAAe,EAAEI,kBAAkB,CAAC;EAEjDG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEE,aAAa,CAAC;EAC3CH,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;;EAEjD;;EAEA,OAAOM,MAAM,gBAAGX,OAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA2C,CAAC,GAAG,IAAI;AACrE,CAAC;AAACN,EAAA,CAbIF,YAAY;EAAA,QAKZb,QAAQ;AAAA;AAAAsB,EAAA,GALRT,YAAY;AAelB,eAAeA,YAAY;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}